Syntax trees:


======= etherLotto.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity 0.4.25;"
ContractDefinition "EtherLotto"
   Source: "contract EtherLotto {\n    address public bank;\n    struct GameRecord {\n        address winner;\n        uint amount;\n    }\n    uint8 gameNum;\n    GameRecord[] LottoLog;\n    bool won;\n    uint constant TICKET_AMOUNT = 10;\n    uint constant FEE_AMOUNT = 1;\n    uint public pot;\n\n    function EtherLotto() {\n        bank = msg.sender;\n        won = false;\n        gameNum = 0;\n    }\n\n    function RestartLotto() {\n        require(msg.sender == bank);\n        require(won == true);\n        require(pot == 0);\n        won = false;\n        gameNum += 1;\n    }\n\n    function playTicket() payable {\n        require(msg.value == TICKET_AMOUNT);\n        require(won == false);\n        pot += msg.value;\n        uint random = uint(sha3(block.timestamp)) % 2;\n        if (random == 0) {\n            bank.call.value(FEE_AMOUNT)(\" \");\n            won = true;\n            GameRecord gr;\n            gr.winner = msg.sender;\n            gr.amount = pot - FEE_AMOUNT;\n            LottoLog[gameNum] = gr;\n        }\n    }\n\n    function getPot() {\n        require(won == true);\n        if (msg.sender == LottoLog[gameNum].winner) {\n            msg.sender.call.value(LottoLog[gameNum].amount)(\" \");\n            pot = 0;\n        }\n    }\n}"
  VariableDeclaration "bank"
     Type: address
     Gas costs: 335
     Source: "address public bank"
    ElementaryTypeName address
       Source: "address"
  StructDefinition "GameRecord"
     Gas costs: 0
     Source: "struct GameRecord {\n        address winner;\n        uint amount;\n    }"
    VariableDeclaration "winner"
       Type: address
       Source: "address winner"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "amount"
       Type: uint256
       Source: "uint amount"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "gameNum"
     Type: uint8
     Gas costs: 0
     Source: "uint8 gameNum"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "LottoLog"
     Type: struct EtherLotto.GameRecord storage ref[] storage ref
     Gas costs: 0
     Source: "GameRecord[] LottoLog"
    ArrayTypeName
       Source: "GameRecord[]"
      UserDefinedTypeName "GameRecord"
         Source: "GameRecord"
  VariableDeclaration "won"
     Type: bool
     Gas costs: 0
     Source: "bool won"
    ElementaryTypeName bool
       Source: "bool"
  VariableDeclaration "TICKET_AMOUNT"
     Type: uint256
     Gas costs: 3
     Source: "uint constant TICKET_AMOUNT = 10"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 10
       Type: int_const 10
       Source: "10"
  VariableDeclaration "FEE_AMOUNT"
     Type: uint256
     Gas costs: 6
     Source: "uint constant FEE_AMOUNT = 1"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1
       Type: int_const 1
       Source: "1"
  VariableDeclaration "pot"
     Type: uint256
     Gas costs: 287
     Source: "uint public pot"
    ElementaryTypeName uint
       Source: "uint"
  FunctionDefinition "EtherLotto" - public
     Source: "function EtherLotto() {\n        bank = msg.sender;\n        won = false;\n        gameNum = 0;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        bank = msg.sender;\n        won = false;\n        gameNum = 0;\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "bank = msg.sender"
        Assignment using operator =
           Type: address
           Source: "bank = msg.sender"
          Identifier bank
             Type: address
             Source: "bank"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "won = false"
        Assignment using operator =
           Type: bool
           Source: "won = false"
          Identifier won
             Type: bool
             Source: "won"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 0
         Source: "gameNum = 0"
        Assignment using operator =
           Type: uint8
           Source: "gameNum = 0"
          Identifier gameNum
             Type: uint8
             Source: "gameNum"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "RestartLotto" - public
     Source: "function RestartLotto() {\n        require(msg.sender == bank);\n        require(won == true);\n        require(pot == 0);\n        won = false;\n        gameNum += 1;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        require(msg.sender == bank);\n        require(won == true);\n        require(pot == 0);\n        won = false;\n        gameNum += 1;\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == bank)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == bank)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == bank"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier bank
               Type: address
               Source: "bank"
      ExpressionStatement
         Gas costs: 283
         Source: "require(won == true)"
        FunctionCall
           Type: tuple()
           Source: "require(won == true)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "won == true"
            Identifier won
               Type: bool
               Source: "won"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      ExpressionStatement
         Gas costs: 235
         Source: "require(pot == 0)"
        FunctionCall
           Type: tuple()
           Source: "require(pot == 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "pot == 0"
            Identifier pot
               Type: uint256
               Source: "pot"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 20267
         Source: "won = false"
        Assignment using operator =
           Type: bool
           Source: "won = false"
          Identifier won
             Type: bool
             Source: "won"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 20617
         Source: "gameNum += 1"
        Assignment using operator +=
           Type: uint8
           Source: "gameNum += 1"
          Identifier gameNum
             Type: uint8
             Source: "gameNum"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
  FunctionDefinition "playTicket" - public
     Source: "function playTicket() payable {\n        require(msg.value == TICKET_AMOUNT);\n        require(won == false);\n        pot += msg.value;\n        uint random = uint(sha3(block.timestamp)) % 2;\n        if (random == 0) {\n            bank.call.value(FEE_AMOUNT)(\" \");\n            won = true;\n            GameRecord gr;\n            gr.winner = msg.sender;\n            gr.amount = pot - FEE_AMOUNT;\n            LottoLog[gameNum] = gr;\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        require(msg.value == TICKET_AMOUNT);\n        require(won == false);\n        pot += msg.value;\n        uint random = uint(sha3(block.timestamp)) % 2;\n        if (random == 0) {\n            bank.call.value(FEE_AMOUNT)(\" \");\n            won = true;\n            GameRecord gr;\n            gr.winner = msg.sender;\n            gr.amount = pot - FEE_AMOUNT;\n            LottoLog[gameNum] = gr;\n        }\n    }"
      ExpressionStatement
         Gas costs: 31
         Source: "require(msg.value == TICKET_AMOUNT)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.value == TICKET_AMOUNT)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.value == TICKET_AMOUNT"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier TICKET_AMOUNT
               Type: uint256
               Source: "TICKET_AMOUNT"
      ExpressionStatement
         Gas costs: 283
         Source: "require(won == false)"
        FunctionCall
           Type: tuple()
           Source: "require(won == false)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "won == false"
            Identifier won
               Type: bool
               Source: "won"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      ExpressionStatement
         Gas costs: 20232
         Source: "pot += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "pot += msg.value"
          Identifier pot
             Type: uint256
             Source: "pot"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 152
         Source: "uint random = uint(sha3(block.timestamp)) % 2"
        VariableDeclaration "random"
           Type: uint256
           Source: "uint random"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator %
           Type: uint256
           Source: "uint(sha3(block.timestamp)) % 2"
          FunctionCall
             Type: uint256
             Source: "uint(sha3(block.timestamp))"
            ElementaryTypeNameExpression uint
               Type: type(uint256)
               Source: "uint"
            FunctionCall
               Type: bytes32
               Source: "sha3(block.timestamp)"
              Identifier sha3
                 Type: function () pure returns (bytes32)
                 Source: "sha3"
              MemberAccess to member timestamp
                 Type: uint256
                 Source: "block.timestamp"
                Identifier block
                   Type: block
                   Source: "block"
          Literal, token: [no token] value: 2
             Type: int_const 2
             Source: "2"
      IfStatement
         Source: "if (random == 0) {\n            bank.call.value(FEE_AMOUNT)(\" \");\n            won = true;\n            GameRecord gr;\n            gr.winner = msg.sender;\n            gr.amount = pot - FEE_AMOUNT;\n            LottoLog[gameNum] = gr;\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "random == 0"
          Identifier random
             Type: uint256
             Source: "random"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            bank.call.value(FEE_AMOUNT)(\" \");\n            won = true;\n            GameRecord gr;\n            gr.winner = msg.sender;\n            gr.amount = pot - FEE_AMOUNT;\n            LottoLog[gameNum] = gr;\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "bank.call.value(FEE_AMOUNT)(\" \")"
            FunctionCall
               Type: bool
               Source: "bank.call.value(FEE_AMOUNT)(\" \")"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "bank.call.value(FEE_AMOUNT)"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "bank.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "bank.call"
                    Identifier bank
                       Type: address
                       Source: "bank"
                Identifier FEE_AMOUNT
                   Type: uint256
                   Source: "FEE_AMOUNT"
              Literal, token: [no token] value:  
                 Type: literal_string " "
                 Source: "\" \""
          ExpressionStatement
             Gas costs: 20267
             Source: "won = true"
            Assignment using operator =
               Type: bool
               Source: "won = true"
              Identifier won
                 Type: bool
                 Source: "won"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          VariableDeclarationStatement
             Gas costs: 3
             Source: "GameRecord gr"
            VariableDeclaration "gr"
               Type: struct EtherLotto.GameRecord storage pointer
               Source: "GameRecord gr"
              UserDefinedTypeName "GameRecord"
                 Source: "GameRecord"
          ExpressionStatement
             Gas costs: 20272
             Source: "gr.winner = msg.sender"
            Assignment using operator =
               Type: address
               Source: "gr.winner = msg.sender"
              MemberAccess to member winner
                 Type: address
                 Source: "gr.winner"
                Identifier gr
                   Type: struct EtherLotto.GameRecord storage pointer
                   Source: "gr"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          ExpressionStatement
             Gas costs: 20223
             Source: "gr.amount = pot - FEE_AMOUNT"
            Assignment using operator =
               Type: uint256
               Source: "gr.amount = pot - FEE_AMOUNT"
              MemberAccess to member amount
                 Type: uint256
                 Source: "gr.amount"
                Identifier gr
                   Type: struct EtherLotto.GameRecord storage pointer
                   Source: "gr"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "pot - FEE_AMOUNT"
                Identifier pot
                   Type: uint256
                   Source: "pot"
                Identifier FEE_AMOUNT
                   Type: uint256
                   Source: "FEE_AMOUNT"
          ExpressionStatement
             Gas costs: 41338
             Source: "LottoLog[gameNum] = gr"
            Assignment using operator =
               Type: struct EtherLotto.GameRecord storage ref
               Source: "LottoLog[gameNum] = gr"
              IndexAccess
                 Type: struct EtherLotto.GameRecord storage ref
                 Source: "LottoLog[gameNum]"
                Identifier LottoLog
                   Type: struct EtherLotto.GameRecord storage ref[] storage ref
                   Source: "LottoLog"
                Identifier gameNum
                   Type: uint8
                   Source: "gameNum"
              Identifier gr
                 Type: struct EtherLotto.GameRecord storage pointer
                 Source: "gr"
  FunctionDefinition "getPot" - public
     Source: "function getPot() {\n        require(won == true);\n        if (msg.sender == LottoLog[gameNum].winner) {\n            msg.sender.call.value(LottoLog[gameNum].amount)(\" \");\n            pot = 0;\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        require(won == true);\n        if (msg.sender == LottoLog[gameNum].winner) {\n            msg.sender.call.value(LottoLog[gameNum].amount)(\" \");\n            pot = 0;\n        }\n    }"
      ExpressionStatement
         Gas costs: 283
         Source: "require(won == true)"
        FunctionCall
           Type: tuple()
           Source: "require(won == true)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "won == true"
            Identifier won
               Type: bool
               Source: "won"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      IfStatement
         Source: "if (msg.sender == LottoLog[gameNum].winner) {\n            msg.sender.call.value(LottoLog[gameNum].amount)(\" \");\n            pot = 0;\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 854
           Source: "msg.sender == LottoLog[gameNum].winner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member winner
             Type: address
             Source: "LottoLog[gameNum].winner"
            IndexAccess
               Type: struct EtherLotto.GameRecord storage ref
               Source: "LottoLog[gameNum]"
              Identifier LottoLog
                 Type: struct EtherLotto.GameRecord storage ref[] storage ref
                 Source: "LottoLog"
              Identifier gameNum
                 Type: uint8
                 Source: "gameNum"
        Block
           Source: "{\n            msg.sender.call.value(LottoLog[gameNum].amount)(\" \");\n            pot = 0;\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "msg.sender.call.value(LottoLog[gameNum].amount)(\" \")"
            FunctionCall
               Type: bool
               Source: "msg.sender.call.value(LottoLog[gameNum].amount)(\" \")"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "msg.sender.call.value(LottoLog[gameNum].amount)"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "msg.sender.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "msg.sender.call"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                MemberAccess to member amount
                   Type: uint256
                   Source: "LottoLog[gameNum].amount"
                  IndexAccess
                     Type: struct EtherLotto.GameRecord storage ref
                     Source: "LottoLog[gameNum]"
                    Identifier LottoLog
                       Type: struct EtherLotto.GameRecord storage ref[] storage ref
                       Source: "LottoLog"
                    Identifier gameNum
                       Type: uint8
                       Source: "gameNum"
              Literal, token: [no token] value:  
                 Type: literal_string " "
                 Source: "\" \""
          ExpressionStatement
             Gas costs: 5014
             Source: "pot = 0"
            Assignment using operator =
               Type: uint256
               Source: "pot = 0"
              Identifier pot
                 Type: uint256
                 Source: "pot"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
